import pandas as pd
import plotly.express as px
import os
from plotly.subplots import make_subplots
from bispectrum_real_data_analysis.scripts.utils import standardize_array
from loguru import logger

"""
This function plots the data from the csv file generated by the script generate_bispectrum_of_data.py.
To filter one channel, double click one of the lines in the legend. then, select the other corresponding line (if you
clicked in the amplitude, select the phase line and vice versa). All the 16 channels are plotted in the same figure.
The plot in the first row is the amplitude and the plot in the second row is the phase.
"""

if __name__ == "__main__":

    # Select which data to plot
    BASE_PATH = os.getcwd() + "/bispectrum_real_data_analysis/data"

    rat_number: int = 1

    for data_to_process in ("train", "test"):

        hosa_to_plot = ("spectrum", "bispectrum", "trispectrum", "hosa")[3]

        prefix_rat: str = f"rato-{rat_number}-{data_to_process}"

        experiment_date = "04-04-2023"

        logger.info(f"Plotting {hosa_to_plot} data from {prefix_rat} processed in {experiment_date}.")

        files_to_plot = [
            f"{BASE_PATH}/{f}" for f in os.listdir(BASE_PATH) 
            if os.path.isfile(os.path.join(BASE_PATH, f)) 
            and f.startswith(hosa_to_plot)
            and prefix_rat in f
            and f.endswith(f"{experiment_date}.csv")
        ]   

        standardize = False

        for file in files_to_plot:
            logger.info(f"Plotting {file.split('/')[-1]}")
            df = pd.read_csv(file, delimiter=',', encoding="utf8")


            spectrum_colum_amp = [column for column in df.columns if column.startswith("tds_amp")]
            bispectrum_colum_amp = [column for column in df.columns if column.startswith("tdbs_amp")]
            trispectrum_colum_amp = [column for column in df.columns if column.startswith("tdts_amp")]

            amplitudes_df = df.loc[:, spectrum_colum_amp + bispectrum_colum_amp + trispectrum_colum_amp]

            spectrum_colum_phase = [column for column in df.columns if column.startswith("tds_phase")]
            bispectrum_colum_phase = [column for column in df.columns if column.startswith("tdbs_phase")]
            trispectrum_colum_phase = [column for column in df.columns if column.startswith("tdts_phase")]

            phases_df = df.loc[:, spectrum_colum_phase + bispectrum_colum_phase + trispectrum_colum_phase]

            title = file.split('/')[-1].split('.')[0]

            fig = make_subplots(rows=3, cols=1)

            fig.update_layout(
                font_family="Courier New",
                font_color="blue",
                title_font_family="Times New Roman",
                title_font_color="black",
                legend_title_font_color="green",
                title=f"Amplitude - {title}"
            )

            amplitudes = px.line(amplitudes_df, x=df.iloc[:, 0], y=amplitudes_df.columns)

            for amplitude in amplitudes['data']:
                i = 1*(amplitude.legendgroup.startswith("tds")) + \
                2 * (amplitude.legendgroup.startswith("tdbs")) + \
                3 * (amplitude.legendgroup.startswith("tdts"))
                fig.add_trace(amplitude, row=i, col=1)
            
            fig.show()



            fig = make_subplots(rows=3, cols=1)

            fig.update_layout(
                font_family="Courier New",
                font_color="blue",
                title_font_family="Times New Roman",
                title_font_color="black",
                legend_title_font_color="green",
                title=f"Phase - {title}"
            )

            phases = px.line(phases_df, x=df.iloc[:, 0], y=phases_df.columns)

            for phase in phases['data']:
                i = 1*(phase.legendgroup.startswith("tds")) + \
                2 * (phase.legendgroup.startswith("tdbs")) + \
                3 * (phase.legendgroup.startswith("tdts"))
                fig.add_trace(phase, row=i, col=1)
            
            fig.show()
            
    logger.success("Done!")
